from scipy.sparse import csr_matrix
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score, mean_squared_error,accuracy_score, confusion_matrix, classification_report
from sklearn.naive_bayes import GaussianNB

# Configurar o pandas para exibir todas as colunas no console
pd.set_option('display.max_columns', 10)
pd.set_option('display.max_rows', 100)

# Exibir o dataframe no console


caminho_resultado = r'C:\Users\bruno.teofilo\Downloads\análise\Predict_Vendas\Valid.xlsx'
caminho_base = r'C:\Users\bruno.teofilo\Downloads\análise\Predict_Vendas\BaseAjustada.xlsx'
# Carregar os dados
df = pd.read_excel(r'C:\Users\bruno.teofilo\Downloads\análise\Predict_Vendas\170777770_14_05_2024_04_17_11.xlsx')
df_agrupado = df.groupby('Código')['Vendas'].sum().reset_index()
df['Vendas'] = df['Código'].map(df_agrupado.set_index('Código')['Vendas'])
# df = df.drop_duplicates(['Código'])
df.to_excel(caminho_base, index=False)


# Calcular o intervalo interquartil (IQR)
Q1 = df['Vendas'].quantile(0.25)
Q3 = df['Vendas'].quantile(0.75)
IQR = Q3 - Q1
outlier_threshold_low = Q1 - 1.5 * IQR
outlier_threshold_high = Q3 + 1.5 * IQR

# Calcular a média ou mediana de 'Vendas'

mean_vendas = df['Vendas'].mean()
mediana_vendas = df['Vendas'].median()  # Use essa linha se preferir a mediana

df['VendasMedia'] = df['Vendas'].apply(lambda x: mean_vendas if x < outlier_threshold_low or x >
                                       outlier_threshold_high else x)

df['VendasMedian'] = df['Vendas'].apply(lambda x: mediana_vendas if x < outlier_threshold_low or x >
                                        outlier_threshold_high else x)


df['De'] = pd.to_datetime(df['De'], dayfirst=True)
df['Até'] = pd.to_datetime(df['Até'], dayfirst=True)
df['Duração'] = (df['Até'] - df['De']).dt.days
df_treino = pd.DataFrame.copy(df)
df_treino = df_treino.drop(columns=['Total', 'URL', 'Estoque', 'De', 'Até'])
df_vendas = df_treino['Vendas']
df_vendas_media = df_treino['VendasMedia']
df_vendas_mediana = df_treino['VendasMedian']
df_treino = df_treino.drop(columns=['Vendas', 'VendasMedia', 'VendasMedian'])
df_treino['Vendas'] = df_vendas_media

# Crie uma instância do OneHotEncoder
previsores = df_treino.iloc[:, 0:9].values
alvo = df_treino.iloc[:, 9].values.astype(int)

previsores[:, 0] = LabelEncoder().fit_transform(previsores[:, 0])
previsores[:, 1] = LabelEncoder().fit_transform(previsores[:, 1])
previsores[:, 2] = LabelEncoder().fit_transform(previsores[:, 2])
previsores[:, 3] = LabelEncoder().fit_transform(previsores[:, 3])
previsores[:, 4] = LabelEncoder().fit_transform(previsores[:, 4])
previsores[:, 5] = LabelEncoder().fit_transform(previsores[:, 5])
previsores[:, 6] = LabelEncoder().fit_transform(previsores[:, 6])

previsores_df = pd.DataFrame(previsores)
previsores_df.to_excel(caminho_resultado, index=False)

previsores_esc = StandardScaler().fit_transform(previsores)

X_train, X_test, y_train, y_test = train_test_split(previsores, alvo, test_size=0.2, random_state=0)

naive = GaussianNB()
naive.fit(X_train, y_train)

previsoes_naive = naive.predict(X_test)

print("Acurácia: %.2f%%" % (accuracy_score(y_test, previsoes_naive) * 100.0))
print(confusion_matrix(y_test, previsoes_naive))
print(classification_report(y_test, previsoes_naive))

""" # Crie uma instância do modelo de regressão linear
modelo = LinearRegression()

# Treine o modelo usando os dados de treino
modelo.fit(X_train, y_train)

# Faça a predição nos dados de teste
y_pred = modelo.predict(X_test)

# Calcule o erro médio absoluto (MAE)
mae = mean_absolute_error(y_test, y_pred)

# Imprima o MAE
print("Erro Médio Absoluto (MAE):", mae)

# Calculando o R2 score
r2 = r2_score(y_test, y_pred)
print(f'R2 score: {r2} ')

# Calculando RMSE
rmse = mean_squared_error(y_test, y_pred)
print(f'Rmse: {rmse}')
"""
# Definindo o tamanho do gráfico
plt.figure(figsize=(10, 6))

# Criando a linha para os valores reais (y_test)
plt.plot(np.arange(len(y_test)), y_test, marker='o', label='Valores Reais')

# Criando a linha para os valores previstos (y_pred)
plt.plot(np.arange(len(previsoes_naive)), previsoes_naive, marker='x', label='Valores Previstos')

# Adicionando título, rótulos dos eixos e legenda
plt.title('Comparação entre Valores Reais e Previstos')
plt.xlabel('Índice')
plt.ylabel('Valor')
plt.legend()

# Mostrando o gráfico
# plt.show()
# Criando um dicionário com os dados
dados = {
    'Valores Reais': y_test,
    'Valores Previstos': previsoes_naive
}

# Criando o DataFrame a partir do dicionário
df_resultados = pd.DataFrame(dados)

df_resultados.to_excel(caminho_resultado, index=False)
